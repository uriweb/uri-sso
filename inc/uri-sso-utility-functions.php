<?php
/**
 * Description: Convenience functions
 * Version: 0.1
 * Author: John Pennypacker <jpennypacker@uri.edu>
 */


/**
 * Include css
 */
function _uri_sso_css() {
	wp_register_style( 'uri-sso-css', URI_SSO_URL . '/css/uri-sso.css' );
	wp_enqueue_style( 'uri-sso-css' );
}


/**
 * Convenience function to go to the SSO login endpoint, then back to wp-admin
 * @return str
 */
function _uri_sso_get_login_url() {
	$return_to = urlencode( get_admin_url() );
	$url = '/mellon/login?ReturnTo=' . $return_to;
	return $url;
}

/**
 * Query stored settings from the database
 * @param str $key the specific setting to return
 * @return mixed if $key is set, it returns the value of that setting, 
 *  otherwise, array of all settings
 */
function _uri_sso_get_settings( $key, $default=NULL ) {
	$settings = get_option( 'uri_sso', array() );
	if ( ! empty ( $key ) ) {
		if( array_key_exists( $key, $settings ) ) {
			return $settings[$key];
		} else {
			return $default;
		}
	} else {
		return $settings;
	}
}

/**
 * Check the value provided by the server.
 * @return mixed
 */
function _uri_sso_check_remote_user() {
	$username = NULL;

	$fallbacks = _uri_sso_get_fallback_variables();

	foreach ( $fallbacks as $v ) {
		if ( ! empty( $_SERVER[$v] ) ) {
			$username = $_SERVER[$v];
		}
	}

	if ( NULL === $username ) {
		$message = '<strong>ERROR</strong>: No SSO session found.';
		return new WP_Error( 'empty_username', __( $message, 'uri' ) );
	}

	return trim( $username );
}

/**
 * Return the list of environment variables thatm may contain a username. 
 * Defaults are REMOTE_USER, REDIRECT_REMOTE_USER, and URI_LDAP_uid. 
 * @return arr
 */
function _uri_sso_get_fallback_variables() {
	$keys = array('REMOTE_USER', 'REDIRECT_REMOTE_USER', 'URI_LDAP_uid');
	$fallback_keys = _uri_sso_get_settings( 'fallback_variables' );
	if ( ! empty( $fallback_keys ) ) {
		$fallback_keys = explode(',', $fallback_keys);
		$fallback_keys = array_map( 'trim', $fallback_keys );
		$keys = array_merge($fallback_keys, $keys);
	}
	return $keys;
}

/**
 * Create a new WordPress account for the specified username.
 * @todo populate name
 */
function _uri_sso_create_user($username) {
	$email = _uri_sso_get_email( $username );
	$user_id = wp_create_user( $username, wp_generate_password(), $email );
	$user = get_user_by( 'id', $user_id );
	$user_metadata = _uri_sso_get_name();
	// @todo add user's display name and default role https://developer.wordpress.org/reference/functions/wp_update_user/
	
	return $user;
}

/**
 * Get the email address from the server, or generate it programmatically.
 * @return str
 */
function _uri_sso_get_email( $username ) {
	$email = '';
	if ( ! empty ( $_SERVER['URI_LDAP_mail'] ) ) {
		$email = $_SERVER['URI_LDAP_mail'];
	} else {
		$domain = 'uri.edu';
// 		if ( isset( $_SERVER['URI_LDAP_employeetype'] ) && $_SERVER['URI_LDAP_employeetype'] == 'student' ) {
// 			$domain = 'my.uri.edu';
// 		}
		$email = $username . '+autogenerated@' . $domain;
	}
	return $email;
}

/**
 * Get the user's name from the server
 * someday, this could be a separate LDAP query
 * @return arr
 */
function _uri_sso_get_name() {
	return array(
		'display_name' => isset( $_SERVER['URI_LDAP_displayname'] ) ? $_SERVER['URI_LDAP_displayname'] : '', // John
		'first_name' => isset( $_SERVER['URI_LDAP_givenname'] ) ? $_SERVER['URI_LDAP_givenname'] : '', // John D
		'last_name' => isset( $_SERVER['URI_LDAP_sn'] ) ? $_SERVER['URI_LDAP_sn'] : '', // Pennypacker
// 		'deparmtent' => isset( $_SERVER['URI_LDAP_departmentname'] ) ? $_SERVER['URI_LDAP_departmentname'] : '', // Communications & Marketing
// 		'telephone' => isset( $_SERVER['URI_LDAP_telephonenumber'] ) ? $_SERVER['URI_LDAP_telephonenumber'] : '', // (401)874-4890
// 		'affiliation' => isset( $_SERVER['URI_LDAP_employeetype'] ) ? $_SERVER['URI_LDAP_employeetype'] : '', // staff
	);
}
